<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayerTest</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0.8;
hsp = 0;
vsp = 0;
move = 0;

maxSpeed = 9;
jumpSpeed = 10;

canDoubleJump = true;
onGround = false;

xscale = 1;
yscale = 1;
xscaleChange = 0;
yscaleChange = 0;

stationaryHeadSprite = noone;

helmetSprite = noone;
helmetSpriteRun = noone;
helmetSpriteJump = noone;
pantsSprite = noone;
pantsSpriteRun = noone;
pantsSpriteJump = noone;
shirtSprite = noone;
shirtSpriteRun = noone;
shirtSpriteJump = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyRight = keyboard_check(vk_right);
keyLeft = -keyboard_check(vk_left);
keyJump = keyboard_check_pressed(vk_up);
keyCrouch = keyboard_check(vk_down);

if(!global.timeToGo) {
    keyRight = 0;
    keyLeft = 0;
}

hsp += (keyRight + keyLeft) * 1 * (1 - keyCrouch);

if(hsp &gt; maxSpeed)
    hsp = maxSpeed;
else if(hsp &lt; -maxSpeed)
    hsp = -maxSpeed;

if(keyRight) {
    xscale = 1;
} else if(keyLeft == -1) {
    xscale = -1;
}

//xscaleChange = lerp(xscaleChange, -abs(vsp) / 60, 0.1);
//yscaleChange = lerp(yscaleChange, abs(vsp) / 60, 0.1);
xscaleChange = (abs(vsp) * -xscale) / 100;
yscaleChange = abs(vsp) / 100;

if(keyCrouch) {
    //sprite_index = sPlayerCrouch;
    //mask_index = sPlayerCrouch;
    oCamera.shake = 5;
}

if(vsp &gt; 0) {
    sprite_index = global.playerJumpSprite;
    image_speed = 0;
    image_index = 1;
} else if(vsp &lt; 0) {
    sprite_index = global.playerJumpSprite;
    image_speed = 0;
    image_index = 0;
} else {
    image_speed = 0.35;
}

if(onGround) {
    if(keyRight + keyLeft != 0) {
            image_speed = 0.35;
            sprite_index = global.playerRunSprite;
    } else {
        sprite_index = global.playerSprite;
        image_speed = 0.15;
    }
}
    
if((keyRight + keyLeft) == 0 || keyCrouch) {
    if(onGround) {
        if(keyCrouch)
            hsp *= 0.95;
        else
            hsp *= 0.8;
    }
}

if(vsp &lt; 15)
    vsp += grav;
    
if(place_meeting(x, y + 1, pSolid)) {
    if(place_meeting(x, y + 1, oSpring)) {
        audio_play_sound(sndJump, 0, false);
        y -= jumpSpeed;
        vsp = -jumpSpeed * 2;
        return 0;
    }

    onGround = true;
    canDoubleJump = true;
    vsp = keyJump * -jumpSpeed;
    if(keyJump) {
        //xscaleChange = -0.25;
        //yscaleChange = 0.25;
    }
} else {
    onGround = false;
    
    if(keyJump &amp;&amp; canDoubleJump) {
        canDoubleJump = false;
        vsp = -jumpSpeed;
        if(keyJump) {
        //xscaleChange = -0.25;
        //yscaleChange = 0.25;
    }
    }
}

if(place_meeting(x + hsp, y, pSolid)) {
    ycheck = 0;
    while(place_meeting(x + hsp, y - ycheck, pSolid) &amp;&amp; ycheck &lt;= abs(hsp))
        ycheck++;
        
    if(place_meeting(x + hsp, y - ycheck, pSolid)) {
        while(!place_meeting(x + sign(hsp), y, pSolid)) {
            x += sign(hsp);
        }
        
        hsp = 0;
    } else {
        y -= ycheck;
    }
}
if(place_meeting(x, y + vsp, pSolid)) {
    while(!place_meeting(x, y + sign(vsp), pSolid)) {
        y += sign(vsp);
    }
    
    if(vsp &gt; 0) {
        for(i = -2; i &lt; 3; i++) {
            instance_create(x + (i * 2) + random_range(-2, 2), y + random_range(0, 3) + sprite_height / 2, oDust);
        }
    }
    
    vsp = 0;
    
    if(!audio_is_playing(sndFootstep)) {
        audio_play_sound(sndFootstep, 0, false);
    }
}

//we are jumping in the air
if(!onGround &amp;&amp; keyJump) {
    //we are against a wall
    if(place_meeting(x + 1, y, pSolid)) {
        vsp = -jumpSpeed * 1.25;
        hsp = -maxSpeed * 0.75;
        if(!audio_is_playing(sndFootstep)) {
            audio_play_sound(sndFootstep, 0, false);
        }
        //xscaleChange = -0.25;
        //yscaleChange = 0.25;
        //canMove = false;
        //move = -1;//jump to the left
        //alarm[0] = 10;
    } else if(place_meeting(x - 1, y, pSolid)) {
        vsp = -jumpSpeed * 1.25;
        hsp = maxSpeed * 0.75;
        if(!audio_is_playing(sndFootstep)) {
            audio_play_sound(sndFootstep, 0, false);
        }
        //xscaleChange = -0.25;
        //yscaleChange = 0.25;
        //canMove = false;
        //move = 1;//jump to the left
        //alarm[0] = 10;
    }
}

x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keySuck = keyboard_check(ord('Z'));


if(keySuck) {
    if(!instance_exists(oSuck)) {
        suck = instance_create(x, y, oSuck);
        suck.parent = id;
        suck.image_xscale = xscale;
    }
}

if(sprite_index == sPlayerRun) {
    if(floor(image_index) == 2 &amp;&amp; !audio_is_playing(sndFootstep2)) {
        audio_play_sound(sndFootstep2, 0, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>suckKeyUp = keyboard_check_released(ord('Z'));
suckKey = keyboard_check(ord('Z'));
suckKeyDown = keyboard_check_pressed(ord('Z'));

if(suckKeyUp) {
    if(audio_is_playing(sndVaccume)) {
        audio_stop_sound(sndVaccume);
    }
    if(audio_is_playing(sndVaccumeStart)) {
        audio_stop_sound(sndVaccumeStart);
    }
    
    if(audio_is_playing(sndVaccumeEnd)) {
    }
    
    audio_play_sound(sndVaccumeEnd, 3, false);
}

if(suckKeyDown) {
    audio_play_sound(sndVaccumeStart, 2, false);
}

if(suckKey) {
    if(audio_is_playing(sndVaccumeEnd)) {
        audio_stop_sound(sndVaccumeEnd);
    }

    if(!audio_is_playing(sndVaccume) &amp;&amp; !audio_is_playing(sndVaccumeStart)) {
        audio_play_sound(sndVaccume, 1, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oDot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
    instance_destroy();

image_blend = c_green;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oDeath">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);

if(helmetSprite != noone) {
    if(sprite_index == sPlayer || sprite_index == sPlayer2)
        draw_sprite_ext(helmetSprite, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
    else if(sprite_index == sPlayerRun || sprite_index == sPlayerRun2)
        draw_sprite_ext(helmetSpriteRun, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
    else if(sprite_index == sPlayerJump || sprite_index == sPlayerJump2)
        draw_sprite_ext(helmetSpriteJump, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
}

if(pantsSprite != noone) {
    if(sprite_index == sPlayer || sprite_index == sPlayer2)
        draw_sprite_ext(pantsSprite, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
    else if(sprite_index == sPlayerRun || sprite_index == sPlayerRun2)
        draw_sprite_ext(pantsSpriteRun, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
    else if(sprite_index == sPlayerJump || sprite_index == sPlayerJump2)
        draw_sprite_ext(pantsSpriteJump, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
}

if(shirtSprite != noone) {
    if(sprite_index == sPlayer || sprite_index == sPlayer2)
        draw_sprite_ext(shirtSprite, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
    else if(sprite_index == sPlayerRun || sprite_index == sPlayerRun2)
        draw_sprite_ext(shirtSpriteRun, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
    else if(sprite_index == sPlayerJump || sprite_index == sPlayerJump2)
        draw_sprite_ext(shirtSpriteJump, image_index, x, y, xscale + xscaleChange, yscale + yscaleChange, image_angle, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
