<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create basic stats
global.frogCount = 0;
global.batCount = 0;
global.turtleCount = 0;
global.coinCount = 0;

perc = 0;
loading = true;

MAX_INST_WIDTH = 512;
i = 0;
overrideNext = "none";

infoText[0] = "MAXIMIZING MAXIMIZERS";
infoText[1] = "JUICING LEMONS";
infoText[2] = "INITIALIZING FROG MATRIX";
infoText[3] = "LOAFING ABOUT";
infoText[4] = "LOADING";
infoText[5] = "MAKING THE GAME";
infoText[6] = "LOADING";
infoText[7] = "LOADING";
infoText[8] = "LOADING";
infoText[9] = "LOADING";

currentText = choose(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);

//world building values
global.sets[0, 0] = 0;
global.sets[0, 1] = 0;
global.sets[1, 0] = 32;
global.sets[1, 1] = 32;
global.sets[2, 0] = 32;
global.sets[2, 1] = 0;
global.sets[3, 0] = 0;
global.sets[3, 1] = 32;

audio_stop_sound(mscMain);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(i == 20 &amp;&amp; loading) {
    //create finish line
    for(j = 0; j &lt; 3; j++) {
        instance_create(room_width, -448 + (j * 448), oCheckpoint);
    }
    
    with(oBlock) {
        repeat(1 + irandom(2)) {
            if(tile_layer_find(-40, x, y - 32) == -1) {
                chance = random(10);
                if(chance &gt;= 3) {
                    instance_create(x + random_range(-16, 16), y - 15, oGrass);
                }
            }
        }
        
        chance = random(10);
        if(chance &gt;= 8) {
            if(choose(0, 1) == 0) {
                if(tile_layer_find(-40, x, y - 32) == -1) {
                    instance_create(x + random_range(-16, 16), y - 24, choose(oTurtle, oFrog));
                }
            } else {
                if(tile_layer_find(-40, x, y + 32) == -1) {
                    instance_create(x + random_range(-16, 16), y + 24, oBat);
                }
            }
        }
    }
    
    //create mandatory controllers
    instance_create(128, 128, oRacer);
    instance_create(-64, 0, oDeath);
    instance_create(0, 0, oCamera);
    instance_create(0, 0, oMenu);
    
    audio_play_sound(mscMain, 5, true);
    
    loading = false;
}

if(loading) {
    show_debug_message("Loading level " + string(i) + "/20");

    //choose random file to open
    if(overrideNext == "none") {
        if(i &lt; 2)
            levelName = "room_0.txt";
        else
            levelName = choose("room_0.txt", "room_1.txt", "room_2.txt", "room_3.txt", "room_4.txt", "room_6.txt", "room_7.txt");
    } else {
        levelName = overrideNext;
        overrideNext = "none";
    }
    
    if(levelName == "room_5.txt") {
        overrideNext = "room_5_2.txt";
    }
        
    levelFile = file_text_open_read(working_directory + "\" + levelName);
    
    //read in file and create objects
    text = file_text_readln(levelFile);
    j = 0;
    while(text != "EOF") {    
        params = string_split(text, " ");
        switch(params[0]) {
            case "block":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oBlock);
                choice = choose(0, 1, 2, 3);
                tile_add(tlCenters, global.sets[choice, 0], global.sets[choice, 1], 32, 32, (i * MAX_INST_WIDTH) + xx - 16, yy - 16, -40);
            break;
            
            case "blocks":
                /*for(xx = real(params[1]); xx &lt; real(params[3]); xx += 32) {
                    for(yy = real(params[2]); yy &lt; real(params[4]); yy += 32) {
                        instance_create((i * MAX_INST_WIDTH) + xx, yy, oBlock);
                    }
                }*/
                for(xx = real(params[1]); xx &lt; real(params[3]); xx += 32) {
                    for(yy = real(params[2]); yy &lt; real(params[4]); yy += 32) {
                        if(yy == real(params[2]) || xx == real(params[1]) || yy &gt;= real(params[4])-32 || xx &gt;= real(params[3])-32)
                            instance_create((i * MAX_INST_WIDTH) + xx, yy, oBlock);
                        //else {
                        
                        choice = choose(0, 1, 2, 3);
                        tile_add(tlCenters, global.sets[choice, 0], global.sets[choice, 1], 32, 32, (i * MAX_INST_WIDTH) + xx - 16, yy - 16, -40);
                        //}
                    }
                }
            break;
            
            case "grass":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oGrass);
            break;
            
            case "frog":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oFrog);
            break;
            
            case "bat":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oBat);
            break;
            
            case "turtle":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oTurtle);
            break;
            
            case "crate":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oBlockSuckable);
            break;
            
            case "chest":
                chance = random(100);
                if(chance &gt; real(params[3]))
                    instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oChest);
            break;
            
            case "spring":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oSpring);
            break;
            
            case "lava":
                createLava((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), real(params[3]), real(params[4]), round((real(params[3]) / 16)));
            break;
            
            case "slopeR":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oSlopeRight);
            break;
            
            case "slopeL":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oSlope);
            break;
            
            case "slopeDR":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oSlopeDownRight);
            break;
            
             case "slopeLR":
                instance_create((i * MAX_INST_WIDTH) + real(params[1]), real(params[2]), oSlopeDown);
            break;
        }
        text = file_text_readln(levelFile);
    }
    
    perc += 2.5;
    
    //create tiles over objects
    with(oBlock) {
        /*if(!place_meeting(x, y - 1, pTileObject) &amp;&amp; place_meeting(x + 1, y, pTileObject) &amp;&amp; place_meeting(x - 1, y, pTileObject) &amp;&amp; place_meeting(x, y + 1, pTileObject)
        &amp;&amp; true) {//TOP FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else if(place_meeting(x, y - 1, pTileObject) &amp;&amp; !place_meeting(x + 1, y, pTileObject) &amp;&amp; place_meeting(x - 1, y, pTileObject) &amp;&amp; place_meeting(x, y + 1, pTileObject)
        &amp;&amp; true) {//RIGHT FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0], global.sets[choice, 1] + 64, 32, 32, x - 16, y - 16, -50);
        } else if(place_meeting(x, y - 1, pTileObject) &amp;&amp; place_meeting(x + 1, y, pTileObject) &amp;&amp; !place_meeting(x - 1, y, pTileObject) &amp;&amp; place_meeting(x, y + 1, pTileObject)
        &amp;&amp; true) {//LEFT FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0] + 64, global.sets[choice, 1] + 64, 32, 32, x - 16, y - 16, -50);
        } else if(place_meeting(x, y - 1, pTileObject) &amp;&amp; place_meeting(x + 1, y, pTileObject) &amp;&amp; place_meeting(x - 1, y, pTileObject) &amp;&amp; !place_meeting(x, y + 1, pTileObject)) {//BOTTOM FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0] + 64, global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else if(!place_meeting(x, y - 1, pTileObject) &amp;&amp; !place_meeting(x + 1, y, pTileObject) &amp;&amp; place_meeting(x - 1, y, pTileObject) &amp;&amp; place_meeting(x, y + 1, pTileObject)) {//TOP RIGHT FREE
            tile_add(tlCorners, 32, 0, 32, 32, x - 16, y - 16, -50);
        } else if(!place_meeting(x, y - 1, pTileObject) &amp;&amp; place_meeting(x + 1, y, pTileObject) &amp;&amp; !place_meeting(x - 1, y, pTileObject) &amp;&amp; place_meeting(x, y + 1, pTileObject)) {//TOP LEFT FREE
            tile_add(tlCorners, 0, 0, 32, 32, x - 16, y - 16, -50);
        } else if(place_meeting(x, y - 1, pTileObject) &amp;&amp; !place_meeting(x + 1, y, pTileObject) &amp;&amp; place_meeting(x - 1, y, pTileObject) &amp;&amp; !place_meeting(x, y + 1, pTileObject)) {//BOTTOM RIGHT FREE
            tile_add(tlCorners, 32, 32, 32, 32, x - 16, y - 16, -50);
        } else if(place_meeting(x, y - 1, pTileObject) &amp;&amp; place_meeting(x + 1, y, pTileObject) &amp;&amp; !place_meeting(x - 1, y, pTileObject) &amp;&amp; !place_meeting(x, y + 1, pTileObject)) {//BOTTOM LEFT FREE
            tile_add(tlCorners, 0, 32, 32, 32, x - 16, y - 16, -50);
        } else if(place_meeting(x, y - 1, pTileObject) &amp;&amp; !place_meeting(x + 1, y, pTileObject) &amp;&amp; !place_meeting(x - 1, y, pTileObject) &amp;&amp; !place_meeting(x, y + 1, pTileObject)) {//BOTTOM LEFT RIGHT FREE
            tile_add(tlPoletops, 32, 32, 32, 32, x - 16, y - 16, -50);
        } else if(!place_meeting(x, y - 1, pTileObject) &amp;&amp; !place_meeting(x + 1, y, pTileObject) &amp;&amp; !place_meeting(x - 1, y, pTileObject) &amp;&amp; place_meeting(x, y + 1, pTileObject)) {//TOP LEFT RIGHT FREE
            tile_add(tlPoletops, 0, 0, 32, 32, x - 16, y - 16, -50);
        } else if(!place_meeting(x, y - 1, pTileObject) &amp;&amp; place_meeting(x + 1, y, pTileObject) &amp;&amp; !place_meeting(x - 1, y, pTileObject) &amp;&amp; !place_meeting(x, y + 1, pTileObject)) {//LEFT BOTTOM TOP FREE
            tile_add(tlPoletops, 0, 32, 32, 32, x - 16, y - 16, -50);
        } else if(!place_meeting(x, y - 1, pTileObject) &amp;&amp; !place_meeting(x + 1, y, pTileObject) &amp;&amp; place_meeting(x - 1, y, pTileObject) &amp;&amp; !place_meeting(x, y + 1, pTileObject)) {//RIGHT BOTTOM TOP FREE
            tile_add(tlPoletops, 32, 0, 32, 32, x - 16, y - 16, -50);
        } else if(!place_meeting(x, y - 1, pTileObject) &amp;&amp; place_meeting(x + 1, y, pTileObject) &amp;&amp; place_meeting(x - 1, y, pTileObject) &amp;&amp; !place_meeting(x, y + 1, pTileObject)
        &amp;&amp; true) {//TOP BOTTOM FREE
            choice = choose(0, 1);
            tile_add(tlPoles, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else if(place_meeting(x, y - 1, pTileObject) &amp;&amp; !place_meeting(x + 1, y, pTileObject) &amp;&amp; !place_meeting(x - 1, y, pTileObject) &amp;&amp; place_meeting(x, y + 1, pTileObject)) {//RIGHT LEFT FREE
            choice = choose(2, 3);
            tile_add(tlPoles, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else {
            choice = choose(0, 1, 2, 3);
            tile_add(tlCenters, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        }*/
        
        if(tile_layer_find(-40, x, y - 32) == -1 &amp;&amp; tile_layer_find(-40, x + 32, y) != -1 &amp;&amp; tile_layer_find(-40, x - 32, y) != -1 &amp;&amp; tile_layer_find(-40, x, y + 32) != -1) {//TOP FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) != -1 &amp;&amp; tile_layer_find(-40, x + 32, y) == -1 &amp;&amp; tile_layer_find(-40, x - 32, y) != -1 &amp;&amp; tile_layer_find(-40, x, y + 32) != -1) {//RIGHT FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0], global.sets[choice, 1] + 64, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) != -1 &amp;&amp; tile_layer_find(-40, x + 32, y) != -1 &amp;&amp; tile_layer_find(-40, x - 32, y) == -1 &amp;&amp; tile_layer_find(-40, x, y + 32) != -1) {//LEFT FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0] + 64, global.sets[choice, 1] + 64, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) != -1 &amp;&amp; tile_layer_find(-40, x + 32, y) != -1 &amp;&amp; tile_layer_find(-40, x - 32, y) != -1 &amp;&amp; tile_layer_find(-40, x, y + 32) == -1) {//BOTTOM FREE
            choice = choose(0, 1, 2, 3);
            tile_add(tlBlocks, global.sets[choice, 0] + 64, global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) == -1 &amp;&amp; tile_layer_find(-40, x + 32, y) == -1 &amp;&amp; tile_layer_find(-40, x - 32, y) != -1 &amp;&amp; tile_layer_find(-40, x, y + 32) != -1) {//TOP RIGHT FREE
            tile_add(tlCorners, 32, 0, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) == -1 &amp;&amp; tile_layer_find(-40, x + 32, y) != -1 &amp;&amp; tile_layer_find(-40, x - 32, y) == -1 &amp;&amp; tile_layer_find(-40, x, y + 32) != -1) {//TOP LEFT FREE
            tile_add(tlCorners, 0, 0, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) != -1 &amp;&amp; tile_layer_find(-40, x + 32, y) == -1 &amp;&amp; tile_layer_find(-40, x - 32, y) != -1 &amp;&amp; tile_layer_find(-40, x, y + 32) == -1) {//BOTTOM RIGHT FREE
            tile_add(tlCorners, 32, 32, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) != -1 &amp;&amp; tile_layer_find(-40, x + 32, y) != -1 &amp;&amp; tile_layer_find(-40, x - 32, y) == -1 &amp;&amp; tile_layer_find(-40, x, y + 32) == -1) {//BOTTOM LEFT FREE
            tile_add(tlCorners, 0, 32, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) != -1 &amp;&amp; tile_layer_find(-40, x + 32, y) == -1 &amp;&amp; tile_layer_find(-40, x - 32, y) == -1 &amp;&amp; tile_layer_find(-40, x, y + 32) == -1) {//BOTTOM LEFT RIGHT FREE
            tile_add(tlPoletops, 32, 32, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) == -1 &amp;&amp; tile_layer_find(-40, x + 32, y) == -1 &amp;&amp; tile_layer_find(-40, x - 32, y) == -1 &amp;&amp; tile_layer_find(-40, x, y + 32) != -1) {//TOP LEFT RIGHT FREE
            tile_add(tlPoletops, 0, 0, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) == -1 &amp;&amp; tile_layer_find(-40, x + 32, y) != -1 &amp;&amp; tile_layer_find(-40, x - 32, y) == -1 &amp;&amp; tile_layer_find(-40, x, y + 32) == -1) {//LEFT BOTTOM TOP FREE
            tile_add(tlPoletops, 0, 32, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) == -1 &amp;&amp; tile_layer_find(-40, x + 32, y) == -1 &amp;&amp; tile_layer_find(-40, x - 32, y) != -1 &amp;&amp; tile_layer_find(-40, x, y + 32) == -1) {//RIGHT BOTTOM TOP FREE
            tile_add(tlPoletops, 32, 0, 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) == -1 &amp;&amp; tile_layer_find(-40, x + 32, y) != -1 &amp;&amp; tile_layer_find(-40, x - 32, y) != -1 &amp;&amp; tile_layer_find(-40, x, y + 32) == -1) {//TOP BOTTOM FREE
            choice = choose(0, 1);
            tile_add(tlPoles, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else if(tile_layer_find(-40, x, y - 32) != -1 &amp;&amp; tile_layer_find(-40, x + 32, y) == -1 &amp;&amp; tile_layer_find(-40, x - 32, y) == -1 &amp;&amp; tile_layer_find(-40, x, y + 32) != -1) {//RIGHT LEFT FREE
            choice = choose(2, 3);
            tile_add(tlPoles, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        } else {
            choice = choose(0, 1, 2, 3);
            tile_add(tlCenters, global.sets[choice, 0], global.sets[choice, 1], 32, 32, x - 16, y - 16, -50);
        }
    }
    
    with(oSlope) {
        tile_add(tlSlopes, 32, 0, 32, 32, x - 16, y - 16, -50);
    }
    
    with(oSlopeDown) {
        tile_add(tlSlopes, 32, 32, 32, 32, x - 16, y - 16, -50);
    }
    
    with(oSlopeRight) {
        tile_add(tlSlopes, 0, 0, 32, 32, x - 16, y - 16, -50);
    }
    
    with(oSlopeDownRight) {
        tile_add(tlSlopes, 0, 32, 32, 32, x - 16, y - 16, -50);
    }
    
    //cleanup
    file_text_close(levelFile);
    
    perc += 2.5;
    
    i++;
    
    if(perc mod 10 == 0)
        currentText = choose(0, 1, 3, 4, 5, 6, 7, 8, 9);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(loading) {
    draw_set_color(c_black);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
    draw_set_color(c_white);
    draw_set_valign(fa_center);
    draw_set_halign(fa_center);
    draw_set_font(global.evilFont);
    draw_text(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, infoText[currentText] + " %" + string(perc));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
