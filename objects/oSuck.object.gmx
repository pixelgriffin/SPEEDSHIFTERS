<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite27</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>suckTime = 0;

/*if(!audio_is_playing(sndVaccume)) {
    audio_play_sound(sndVaccume, 1, true);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(oFrog) {
    grav = 0.8;
}
with(oBlockSuckable) {
    grav = 0.8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(parent)) {
    x = parent.x;
    y = parent.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(oRacer)) {
    return 0;
}

suckTime += 1;

with(oFrog) {
    if(canSuck) {
        if(point_distance(x, y, other.x, other.y) &lt; 200 &amp;&amp; y &gt; other.y - 48 &amp;&amp; y &lt; other.y + 16) {
            if((x &lt; oRacer.x &amp;&amp; oRacer.xscale &lt; 0) || (x &gt;= oRacer.x &amp;&amp; oRacer.xscale &gt; 0)) {
                distPow = min(10 / (point_distance(x, y, oRacer.x, oRacer.y) / 2), 10);
                dir = point_direction(x, y, oRacer.x, oRacer.y);
                
                hsp += lengthdir_x(distPow * 3, dir);
                vsp += lengthdir_y(distPow * 15, dir);
                
                //evidently causing the game to crash..
                //image_xscale = lerp(image_xscale, 0, (distPow / 10) * 3);
                //image_yscale = lerp(image_xscale, 0, (distPow / 10) * 3);
                
                grav = 0;
            }
         } else {
            grav = 0.8;
         }
     }
}

with(oBlockSuckable) {
    if(point_distance(x, y, other.x, other.y) &lt; 200 &amp;&amp; y &gt; other.y - 16 &amp;&amp; y &lt; other.y + 16) {
        if((x &lt; oRacer.x &amp;&amp; oRacer.xscale &lt; 0) || (x &gt;= oRacer.x &amp;&amp; oRacer.xscale &gt; 0)) {
            distPow = min(10 / (point_distance(x, y, oRacer.x, oRacer.y) / 2), 10);
            dir = point_direction(x, y, oRacer.x, oRacer.y);
            
            hsp += lengthdir_x(distPow * 3, dir);
            vsp += lengthdir_y(distPow * 3, dir);
            
            //image_xscale = lerp(image_xscale, 0, (distPow / 10) * 1.5);
            //image_yscale = lerp(image_xscale, 0, (distPow / 10) * 1.5);
            
            grav = 0;
        }
     } else {
        grav = 0.8;
     }
}

with(oFrog) {
    if(point_distance(x, y, other.x, other.y) &lt; 200 &amp;&amp; y &gt; other.y - 48 &amp;&amp; y &lt; other.y + 16) {
        if((x &lt; oRacer.x &amp;&amp; oRacer.xscale &lt; 0) || (x &gt;= oRacer.x &amp;&amp; oRacer.xscale &gt; 0)) {
            repeat(1) {
                createPointDist = random(point_distance(x, y, oRacer.x, oRacer.y));
                
                createPointAngle = point_direction(x, y, oRacer.x, oRacer.y) + (sin(other.suckTime) * 3);
                dust = instance_create(x + lengthdir_x(createPointDist, createPointAngle), y + lengthdir_y(createPointDist, createPointAngle), oDust);
            }
        }
    }
}

with(oBlockSuckable) {
    if(point_distance(x, y, other.x, other.y) &lt; 200 &amp;&amp; y &gt; other.y - 16 &amp;&amp; y &lt; other.y + 16) {
        if((x &lt; oRacer.x &amp;&amp; oRacer.xscale &lt; 0) || (x &gt;= oRacer.x &amp;&amp; oRacer.xscale &gt; 0)) {
            repeat(1) {
                createPointDist = random(point_distance(x, y, oRacer.x, oRacer.y));
                
                createPointAngle = point_direction(x, y, oRacer.x, oRacer.y) + (sin(other.suckTime) * 3);
                dust = instance_create(x + lengthdir_x(createPointDist, createPointAngle), y + lengthdir_y(createPointDist, createPointAngle), oDust);
            }
        }
    }
}

with(oGrass) {
    if(point_distance(x, y, other.x, other.y) &lt; 200 &amp;&amp; y &gt; other.y - 32 &amp;&amp; y &lt; other.y + 32) {
        if((x &lt; oRacer.x &amp;&amp; oRacer.xscale &lt; 0) || (x &gt;= oRacer.x &amp;&amp; oRacer.xscale &gt; 0)) {
            if(oRacer.x &lt; x) {
                xskew = -5;
            } else {
                xskew = 5;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
