<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sLogo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vsp = 12;
time = 0;

alpha2 = 0;
image_alpha = 0;
//7 61 77
image_blend = make_color_hsv(7, 61, 77);

hasNotPressedZ = true;
doDrawPressZ = false;
doDrawMenuOptions = false;
doDrawPlayers = false;
doDrawConfig = false;
doDrawDifficulty = false;

currentlySelectedMenuItem = 0;

audio_stop_sound(mscMain);
if(!audio_is_playing(sndIntroTune)) {
    audio_play_sound(sndIntroTune, 0, false);
}

doStuff = false;
alarm[1] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>doStuff = true;

instance_create(x - 150, y - 20, oStar);
otherStar = instance_create(x + 150, y - 20, oStar);
otherStar.dir = -1;
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hasNotPressedZ) {
    doDrawPressZ = !doDrawPressZ;
    alarm[0] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y += vsp;
time += 0.1;

image_alpha += 0.0075;
if(image_alpha &gt; 1)
    image_alpha = 1;
    
if(vsp == 0 &amp;&amp; doStuff) {
    alpha2 += 0.01;
    if(alpha2 &gt; 1)
        alpha2 = 1;
}
    
vsp *= 0.925;

if(vsp &lt; 0.001 &amp;&amp; doStuff) {
    y += sin(time) * 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyZ = keyboard_check_pressed(ord('Z'));
keyDown = keyboard_check_pressed(vk_down);
keyUp = keyboard_check_pressed(vk_up);
keyLeft = keyboard_check_pressed(vk_left);
keyRight = keyboard_check_pressed(vk_right);

if(keyZ) {
    audio_play_sound(sndCoin, 0, false);
    if(hasNotPressedZ) {
        hasNotPressedZ = false;
        doDrawPressZ = false;
        doDrawMenuOptions = true;
    } else if(doDrawMenuOptions) {
        if(currentlySelectedMenuItem == 0) {
            doDrawPlayers = true;
            currentlySelectedMenuItem = 0;
        } else if(currentlySelectedMenuItem == 1) {
            doDrawConfig = true;
            currentlySelectedMenuItem = 0;
        } else if(currentlySelectedMenuItem == 2) {
            game_end();
        }
        
        doDrawMenuOptions = false;
    } else if(doDrawPlayers) {
        if(currentlySelectedMenuItem == 0) {
            global.playerSprite = sPlayer;
            global.playerRunSprite = sPlayerRun;
            global.playerJumpSprite = sPlayerJump;
            global.playerHeadSprite = sPlayerHead;
            doDrawPlayers = false;
            doDrawDifficulty = true;
            currentlySelectedMenuItem = 1
            //room_goto(rmStart);
        } else if(currentlySelectedMenuItem == 1) {
            if(global.maxStreak &gt;= 5) {
                global.playerSprite = sPlayer2;
                global.playerRunSprite = sPlayerRun2;
                global.playerJumpSprite = sPlayerJump2;
                global.playerHeadSprite = sPlayerHead2;
                doDrawPlayers = false;
                doDrawDifficulty = true;
                currentlySelectedMenuItem = 1
                //room_goto(rmStart);
            }
        } else if(currentlySelectedMenuItem == 2) {
            doDrawPlayers = false;
            doDrawMenuOptions = true;
            currentlySelectedMenuItem = 2;
        }
    } else if(doDrawConfig) {
        if(currentlySelectedMenuItem == 0) {
            global.soundOn = !global.soundOn;
        } else if(currentlySelectedMenuItem == 1) {
        } else if(currentlySelectedMenuItem == 2) {
            doDrawConfig = false;
            doDrawMenuOptions = true;
            currentlySelectedMenuItem = 1;
        }
    } else if(doDrawDifficulty) {
        if(currentlySelectedMenuItem == 0) {
            global.difficulty = 2;
        } else if(currentlySelectedMenuItem == 1) {
            global.difficulty = 1;
        } else if(currentlySelectedMenuItem == 2) {
            global.difficulty = 0;
        }
        room_goto(rmStart);
    }
}

if(keyDown) {
    audio_play_sound(sndSelect, 0, false);
    if(doDrawMenuOptions || doDrawConfig || doDrawDifficulty) {
        currentlySelectedMenuItem++;
    
        if(currentlySelectedMenuItem == 3)
            currentlySelectedMenuItem = 0;
    } else if(doDrawPlayers) {
        currentlySelectedMenuItem = 2;
    }
}

if(keyUp) {
    audio_play_sound(sndSelect, 0, false);
    if(doDrawMenuOptions || doDrawConfig || doDrawDifficulty) {
        currentlySelectedMenuItem--;
    
        if(currentlySelectedMenuItem == -1)
            currentlySelectedMenuItem = 2;
    } else if(doDrawPlayers) {
        currentlySelectedMenuItem = 0;
    }
}

if(keyLeft) {
    if(doDrawPlayers) {
        audio_play_sound(sndSelect, 0, false);
        if(currentlySelectedMenuItem == 1 || currentlySelectedMenuItem == 2)
            currentlySelectedMenuItem = 0;
        else if(currentlySelectedMenuItem == 0)
            currentlySelectedMenuItem = 1;
    }
}

if(keyRight) {
    if(doDrawPlayers) {
        audio_play_sound(sndSelect, 0, false);
        if(currentlySelectedMenuItem == 0 || currentlySelectedMenuItem == 2)
            currentlySelectedMenuItem = 1;
        else if(currentlySelectedMenuItem == 1)
            currentlySelectedMenuItem = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, image_angle, image_blend, image_alpha);
draw_sprite_ext(sLogoGrowth, image_index, x, y, 1, 1, image_angle, c_white, image_alpha);

draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(global.evilFont);
draw_set_color(c_white);
if(doDrawPressZ) {
    draw_text(room_width / 2, (room_height / 3) * 2, "PRESS 'Z' TO CONTINUE");
}

if(doDrawMenuOptions) {
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 0) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, "PLAY", 2, 2, 0);
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 1) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 32, "OPTIONS", 2, 2, 0);
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 2) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 64, "EXIT", 2, 2, 0);
    draw_set_color(c_white);
} else if(doDrawPlayers) {
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 0) {
        draw_set_color(c_white);
    }
    draw_sprite_ext(sPlayer, 0, view_xview[0] + view_wview[0] / 2 - 32, view_yview[0] + view_hview[0] / 2 + 16, 1, 1, 0, draw_get_colour(), 1); 
    
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 1) {
        draw_set_color(c_white);
    }
    if(global.maxStreak &lt; 5) {
        draw_sprite_ext(sLocked, 0, view_xview[0] + view_wview[0] / 2 + 32, view_yview[0] + view_hview[0] / 2 + 16, 1, 1, 0, draw_get_colour(), 1); 
        draw_text_transformed(view_xview[0] + view_wview[0] / 2 + 32, view_yview[0] + view_hview[0] / 2 + 40, "COMPLETE 5 RUNS IN#A ROW TO UNLOCK", 0.5, 0.5, 0);
    } else {
        draw_sprite_ext(sPlayer2, 0, view_xview[0] + view_wview[0] / 2 + 32, view_yview[0] + view_hview[0] / 2 + 16, -1, 1, 0, draw_get_colour(), 1); 
    }
    
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 2) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 64, "BACK", 2, 2, 0);
    draw_set_color(c_white);
} else if(doDrawConfig) {
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 0) {
        draw_set_color(c_white);
    }
    
    if(global.soundOn)
        text = "ON";
    else
        text = "OFF";
    
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, "SOUND: " + text, 2, 2, 0);
    
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 1) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 32, "MAIN KEY: 'Z'", 2, 2, 0);
    
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 2) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 64, "BACK", 2, 2, 0);
} else if(doDrawDifficulty) {
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 0) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, "HARDCORE", 2, 2, 0);
    
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 1) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 32, "NORMAL", 2, 2, 0);
    
    draw_set_color(c_dkgray);
    if(currentlySelectedMenuItem == 2) {
        draw_set_color(c_white);
    }
    draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 64, "CASUAL", 2, 2, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
