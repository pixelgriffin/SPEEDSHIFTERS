<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timeToGo = false;
madeIt = false;
died = false;
currentlySelectedMenuItem = 0;

pauseColor = make_color_hsv(20, 43, 90);

countDown = true;

messageY = 0;

timeBeforeGo = "3";
alarm[0] = 25;//go alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(timeBeforeGo == "3") {
    timeBeforeGo = "2";
    alarm[0] = 25;
} else if(timeBeforeGo == "2") {
    timeBeforeGo = "1";
    alarm[0] = 25;
} else if(timeBeforeGo == "1") {
    timeBeforeGo = "RUN!";
    alarm[0] = 25;
} else if(timeBeforeGo == "RUN!") {
    global.timeToGo = true;
    countDown = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyLeft = keyboard_check_pressed(vk_left);
keyRight = keyboard_check_pressed(vk_right);
keyZ = keyboard_check_pressed(ord('Z'));

if(madeIt || died || !instance_exists(oRacer)) {
    messageY = lerp(messageY, -100, 0.05);
    
    if(!instance_exists(oStarCount))
            instance_create(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + 16, oStarCount);
    
    if(messageY &lt; -16) {
        if(!instance_exists(oFrogCount))
            instance_create(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 - 16, oFrogCount);
    }
    
    if(messageY &lt; -32) {
        if(!instance_exists(oTurtleCount))
            instance_create(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 - 32, oTurtleCount);
    }
    
    if(messageY &lt; -48) {
        if(!instance_exists(oBatCount))
            instance_create(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 - 48, oBatCount);
    }
    
    if(messageY &lt; -64) {
        if(!instance_exists(oCoinCount))
            instance_create(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 - 64, oCoinCount);
    }
}

if(keyZ) {
    if(madeIt || died || !instance_exists(oRacer)) {
        if(currentlySelectedMenuItem == 0) {
            room_restart();
            if(madeIt) {
                global.consecutiveWins++;
            }
        } else if(currentlySelectedMenuItem == 1) {
            room_goto(rmInto);
            if(global.consecutiveWins &gt; global.maxStreak) {
                global.maxStreak = global.consecutiveWins;
            }
            global.consecutiveWins = 0;
        }
    }
}

if(keyLeft) {
    if(madeIt || died || !instance_exists(oRacer)) {
        if(currentlySelectedMenuItem == 0)
            currentlySelectedMenuItem = 1;
        else if(currentlySelectedMenuItem == 1)
            currentlySelectedMenuItem = 0;
            
        audio_play_sound(sndSelect, 0, false);
    }
}

if(keyRight) {
    if(madeIt || died || !instance_exists(oRacer)) {
        if(currentlySelectedMenuItem == 0)
            currentlySelectedMenuItem = 1;
        else if(currentlySelectedMenuItem == 1)
            currentlySelectedMenuItem = 0;
            
        audio_play_sound(sndSelect, 0, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.timeToGo) {
   // draw_set_color(pauseColor);
    draw_set_color(c_black);
    draw_set_alpha(0.8);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
    draw_set_color(c_white);
    draw_set_alpha(1);
    
    draw_set_font(global.evilFont);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    if(countDown) {
        draw_set_color(c_white);
        draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, timeBeforeGo, 2, 2, 0);
        draw_set_color(c_white);
    } else if(madeIt) {
        draw_set_color(c_white);
        draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + messageY, "NICE!", 2, 2, 0);
        
        draw_set_color(c_dkgray);
        if(currentlySelectedMenuItem == 0) {
            draw_set_color(c_white);
        }
        draw_text_transformed(view_xview[0] + view_wview[0] / 2 - 32, view_yview[0] + view_hview[0] / 2 + 32, "AGAIN", 1, 1, 0);
        
        draw_set_color(c_dkgray);
        if(currentlySelectedMenuItem == 1) {
            draw_set_color(c_white);
        }
        draw_text_transformed(view_xview[0] + view_wview[0] / 2 + 32, view_yview[0] + view_hview[0] / 2 + 32, "EXIT", 1, 1, 0);
        draw_set_color(c_white);
    } else if(died || !instance_exists(oRacer)) {
        draw_set_color(c_white);
        draw_text_transformed(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2 + messageY, "SHIT...", 2, 2, 0);
        
        draw_set_color(c_dkgray);
        if(currentlySelectedMenuItem == 0) {
            draw_set_color(c_white);
        }
        draw_text_transformed(view_xview[0] + view_wview[0] / 2 - 32, view_yview[0] + view_hview[0] / 2 + 32, "AGAIN", 1, 1, 0);
        
        draw_set_color(c_dkgray);
        if(currentlySelectedMenuItem == 1) {
            draw_set_color(c_white);
        }
        draw_text_transformed(view_xview[0] + view_wview[0] / 2 + 32, view_yview[0] + view_hview[0] / 2 + 32, "EXIT", 1, 1, 0);
        draw_set_color(c_white);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
